-------------------------------------------------NA ADS------------------------------------------------

---------table for only the retailers which have sales attributed to <100
create or replace temp table zip_code_100  as 
select (CITY_REFERENCE_NM||RETAILER_DISPLAY_NM) as city_rtlr, count(distinct RETAILER_LOCATION_POSTAL_CD) as zip_code from table
							WHERE 1=1 
								AND TRIM(UPPER(RETAILER_GEOGRAPHY_DISPLAY_NM)) LIKE '%NORTH%AMERICA%'
								AND UPPER(TRIM(CITY_REFERENCE_NM)) IS NOT NULL
								AND TRIM(UPPER(STORE_SALESMETHOD_TYPE_CD)) LIKE '%INTERNET%'
								AND ACTIVITY_END_DT BETWEEN TO_DATE('2015-01-01') AND TO_DATE('2019-06-30')
								AND TRIM(UPPER(DIVISION_DESC)) NOT LIKE '%OTHER%'
								AND TOTAL_NETSALES_AMT_USD > 0
								AND TOTAL_NETSALES_UNITS > 0
					group by (CITY_REFERENCE_NM||RETAILER_DISPLAY_NM)
					having zip_code >100;


--- IMP BASE TABLE AT ZIP, SEASON, CATEGORY, DIVISION, GENDER LEVEL ---
CREATE OR REPLACE temp TABLE IMP_NA_TABLE_1010 AS
SELECT 	A.*,
		B.N_FS,
		B.N_SO,
		B.N_PARTNER,
		B.N_PARTNER_DIG,
		B.N_DIG,
		B.N_FS_SALES,
		B.N_SO_SALES,
		B.N_PARTNER_SALES,
		B.N_PARTNER_DIG_SALES,
		B.N_DIG_SALES,
		B.N_FS_UNITS,
		B.N_SO_UNITS,
		B.N_PARTNER_UNITS,
		B.N_PARTNER_DIG_UNITS,
		B.N_DIG_UNITS,
		B.NFS_COUNT,
		B.NSO_COUNT,
		B.WOLESALER_COUNT,
		C.HEADWEAR,
		C.EYEWEAR,
		C.BOTTOM,
		C.OTHER_SILHOUETTE,
		C.TOP,
		C.SHOE,
		C.SOCK,
		C.BOYS_PRODUCTS,
		C.GIRLS_PRODUCTS,
		C.MENS_PRODUCTS,
		C.WOMENS_PRODUCTS
		FROM
(SELECT CITY,
       ZIP_CODE,
       YEAR_SSN,
       CATEGORY,
       DIVISION_DESC,
       GENDER,
       NVL(SUM(TOTAL_NETSALES_UNITS), 0) AS NET_SALES_UNITS,
       NVL(SUM(ROUND(TOTAL_NETSALES_AMT_USD, 2)), 0) AS SALES_DOLLARS,
	   NVL((SUM(TOTAL_NETSALES_AMT_USD) / SUM(TOTAL_NETSALES_UNITS)),0) AS MP_AUR,
       SUM(CASE WHEN TRIM(UPPER(CUSTOM_CHANNEL_NM)) = 'N.COM' THEN TOTAL_NETSALES_AMT_USD END) AS N_DOTCOM_SALES_IMP,
       SUM(CASE WHEN TRIM(UPPER(CUSTOM_CHANNEL_NM)) = 'DEPARTMENT STORE' THEN TOTAL_NETSALES_AMT_USD END) AS DEPARTMENT_STORE_SALES,
       SUM(CASE WHEN TRIM(UPPER(CUSTOM_CHANNEL_NM)) = 'ATHLETIC SPECIALTY' THEN TOTAL_NETSALES_AMT_USD END) AS ATHLETIC_SPECIALTY_SALES,
       SUM(CASE WHEN TRIM(UPPER(CUSTOM_CHANNEL_NM)) = 'SPORTING GOODS' THEN TOTAL_NETSALES_AMT_USD END) AS SPORTING_GOODS_SALES,
       SUM(CASE WHEN TRIM(UPPER(CUSTOM_CHANNEL_NM)) = 'CATEGORY SPECIALTY' THEN TOTAL_NETSALES_AMT_USD END) AS CATEGORY_SPECIALTY_SALES,
	   SUM(CASE WHEN TRIM(UPPER(CUSTOM_CHANNEL_NM)) = 'GENERAL FOOTWEAR' THEN TOTAL_NETSALES_AMT_USD END) AS GENERAL_FOOTWEAR_SALES,
       SUM(CASE WHEN TRIM(UPPER(CUSTOM_CHANNEL_NM)) = 'N STORES OWNED' THEN TOTAL_NETSALES_AMT_USD END) AS NSO_SALES,
       SUM(CASE WHEN TRIM(UPPER(CUSTOM_CHANNEL_NM)) = 'N.COM' THEN TOTAL_NETSALES_UNITS END) AS N_DOTCOM_UNITS_IMP,
       SUM(CASE WHEN TRIM(UPPER(CUSTOM_CHANNEL_NM)) = 'DEPARTMENT STORE' THEN TOTAL_NETSALES_UNITS END) AS DEPARTMENT_STORE_UNITS,
       SUM(CASE WHEN TRIM(UPPER(CUSTOM_CHANNEL_NM)) = 'ATHLETIC SPECIALTY' THEN TOTAL_NETSALES_UNITS END) AS ATHLETIC_SPECIALTY_UNITS,
       SUM(CASE WHEN TRIM(UPPER(CUSTOM_CHANNEL_NM)) = 'SPORTING GOODS' THEN TOTAL_NETSALES_UNITS END) AS SPORTING_GOODS_UNITS,
       SUM(CASE WHEN TRIM(UPPER(CUSTOM_CHANNEL_NM)) = 'CATEGORY SPECIALTY' THEN TOTAL_NETSALES_UNITS END) AS CATEGORY_SPECIALTY_UNITS,
	   SUM(CASE WHEN TRIM(UPPER(CUSTOM_CHANNEL_NM)) = 'GENERAL FOOTWEAR' THEN TOTAL_NETSALES_UNITS END) AS GENERAL_FOOTWEAR_UNITS,
       SUM(CASE WHEN TRIM(UPPER(CUSTOM_CHANNEL_NM)) = 'N STORES OWNED' THEN TOTAL_NETSALES_UNITS END) AS NSO_UNITS
	  
FROM
	(
	SELECT UPPER(TRIM(IMP.CITY_REFERENCE_NM)) AS CITY,
			LPAD(TRIM(UPPER(IMP.RETAILER_LOCATION_POSTAL_CD)), 5, '0') AS ZIP_CODE,
			CASE
				WHEN QUARTER(TO_DATE(IMP.ACTIVITY_END_DT))=1 THEN CONCAT(YEAR(TO_DATE(IMP.ACTIVITY_END_DT)), 'SP')
				WHEN QUARTER(TO_DATE(IMP.ACTIVITY_END_DT))=2 THEN CONCAT(YEAR(TO_DATE(IMP.ACTIVITY_END_DT)), 'SU')
				WHEN QUARTER(TO_DATE(IMP.ACTIVITY_END_DT))=3 THEN CONCAT(YEAR(TO_DATE(IMP.ACTIVITY_END_DT)), 'FA')
				WHEN QUARTER(TO_DATE(IMP.ACTIVITY_END_DT))=4 THEN CONCAT(YEAR(TO_DATE(IMP.ACTIVITY_END_DT)), 'HO')
			END AS YEAR_SSN,
			MMX.UNIV_CATEGORY AS CATEGORY,
			IMP.TOTAL_NETSALES_UNITS,
			IMP.TOTAL_NETSALES_AMT_USD,
			IMP.DIVISION_DESC,
			IMP.PRODUCT_CD,
			IMP.GENDER_AGE_MWBG_DESC AS GENDER,
			IMP.CUSTOM_CHANNEL_NM
			
	FROM
		(SELECT CITY_REFERENCE_NM,
				RETAILER_LOCATION_POSTAL_CD,
				ACTIVITY_END_DT,
				PRODUCT_CD,
				GLOBAL_CATEGORY_SUMMARY_DESC AS CATEGORY,
				TOTAL_NETSALES_UNITS,
				TOTAL_NETSALES_AMT_USD,
				DIVISION_DESC,
				GENDER_AGE_MWBG_DESC,
				CUSTOM_CHANNEL_NM
	
		FROM TABLE
		WHERE 1=1 
			AND TRIM(UPPER(RETAILER_GEOGRAPHY_DISPLAY_NM)) LIKE '%NORTH%AMERICA%'
			AND UPPER(TRIM(CITY_REFERENCE_NM)) IS NOT NULL
			AND TRIM(UPPER(STORE_SALESMETHOD_TYPE_CD)) LIKE '%INTERNET%'
			AND ACTIVITY_END_DT BETWEEN TO_DATE('2015-01-01') AND TO_DATE('2019-06-30')
			AND TRIM(UPPER(DIVISION_DESC)) NOT LIKE '%OTHER%'
			AND TOTAL_NETSALES_AMT_USD > 0
			AND TOTAL_NETSALES_UNITS > 0
			and  (CITY_REFERENCE_NM||RETAILER_DISPLAY_NM) in (select distinct city_rtlr from zip_code_100)
		) IMP
			
	INNER JOIN
	
		(SELECT PROD_PROD_CD,
				TRIM(UPPER(MAX(RPT_CATEGORY_L2))) AS UNIV_CATEGORY
		FROM TABLE
		WHERE PROD_PROD_CD IS NOT NULL
		GROUP BY PROD_PROD_CD) MMX ON IMP.PRODUCT_CD = MMX.PROD_PROD_CD) BASE
	  
WHERE 1=1
  AND UPPER(TRIM(CATEGORY)) NOT IN ('NULL','UNKNOWN','OTHER')
  
GROUP BY CITY,
         CATEGORY,
         YEAR_SSN,
         ZIP_CODE,
         DIVISION_DESC,
         GENDER ) A
		 
LEFT JOIN

(SELECT CITY,
       ZIP_CODE,
       YEAR_SSN,
       CATEGORY,
       DIVISION_DESC,
       GENDER
		,MAX(CASE WHEN UPPER(TRIM(RETAILER_DISPLAY_NM)) LIKE '%NFS%' AND UPPER(TRIM(STORE_ACCOUNT_TYPE_CD)) LIKE 'DTC' AND UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'BRICK%' THEN 1 ELSE 0 END) AS N_FS
      ,MAX(CASE WHEN UPPER(TRIM(RETAILER_DISPLAY_NM)) LIKE '%NSO%' AND UPPER(TRIM(STORE_ACCOUNT_TYPE_CD)) LIKE 'DTC' AND UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'BRICK%' THEN 1 ELSE 0 END) AS N_SO
      ,MAX(CASE WHEN UPPER(TRIM(STORE_ACCOUNT_TYPE_CD)) LIKE 'WHOLESALE' AND (UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'BRICK%' OR UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'OTHER') THEN 1 ELSE 0 END) AS N_PARTNER
      ,MAX(CASE WHEN UPPER(TRIM(STORE_ACCOUNT_TYPE_CD)) LIKE 'WHOLESALE' AND UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'INTERNET%' THEN 1 ELSE 0 END) AS N_PARTNER_DIG
      ,MAX(CASE WHEN UPPER(TRIM(STORE_ACCOUNT_TYPE_CD)) LIKE 'DTC' AND UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'INTERNET%' THEN 1 ELSE 0 END) AS N_DIG
	  ,SUM(CASE WHEN UPPER(TRIM(RETAILER_DISPLAY_NM)) LIKE '%NFS%' AND UPPER(TRIM(STORE_ACCOUNT_TYPE_CD)) LIKE 'DTC' AND UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'BRICK%' THEN TOTAL_NETSALES_AMT_USD ELSE 0 END) AS N_FS_SALES
	  ,SUM(CASE WHEN UPPER(TRIM(RETAILER_DISPLAY_NM)) LIKE '%NSO%' AND UPPER(TRIM(STORE_ACCOUNT_TYPE_CD)) LIKE 'DTC' AND UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'BRICK%' THEN TOTAL_NETSALES_AMT_USD ELSE 0 END) AS N_SO_SALES
	  ,SUM(CASE WHEN UPPER(TRIM(STORE_ACCOUNT_TYPE_CD)) LIKE 'WHOLESALE' AND (UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'BRICK%' OR UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'OTHER') THEN TOTAL_NETSALES_AMT_USD ELSE 0 END) AS N_PARTNER_SALES
	  ,SUM(CASE WHEN UPPER(TRIM(STORE_ACCOUNT_TYPE_CD)) LIKE 'WHOLESALE' AND UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'INTERNET%' THEN TOTAL_NETSALES_AMT_USD ELSE 0 END) AS N_PARTNER_DIG_SALES
	  ,SUM(CASE WHEN UPPER(TRIM(STORE_ACCOUNT_TYPE_CD)) LIKE 'DTC' AND UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'INTERNET%' THEN TOTAL_NETSALES_AMT_USD ELSE 0 END) AS N_DIG_SALES
	  ,SUM(CASE WHEN UPPER(TRIM(RETAILER_DISPLAY_NM)) LIKE '%NFS%' AND UPPER(TRIM(STORE_ACCOUNT_TYPE_CD)) LIKE 'DTC' AND UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'BRICK%' THEN TOTAL_NETSALES_UNITS ELSE 0 END) AS N_FS_UNITS
	  ,SUM(CASE WHEN UPPER(TRIM(RETAILER_DISPLAY_NM)) LIKE '%NSO%' AND UPPER(TRIM(STORE_ACCOUNT_TYPE_CD)) LIKE 'DTC' AND UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'BRICK%' THEN TOTAL_NETSALES_UNITS ELSE 0 END) AS N_SO_UNITS
	  ,SUM(CASE WHEN UPPER(TRIM(STORE_ACCOUNT_TYPE_CD)) LIKE 'WHOLESALE' AND (UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'BRICK%' OR UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'OTHER') THEN TOTAL_NETSALES_UNITS ELSE 0 END) AS N_PARTNER_UNITS
	  ,SUM(CASE WHEN UPPER(TRIM(STORE_ACCOUNT_TYPE_CD)) LIKE 'WHOLESALE' AND UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'INTERNET%' THEN TOTAL_NETSALES_UNITS ELSE 0 END) AS N_PARTNER_DIG_UNITS
	  ,SUM(CASE WHEN UPPER(TRIM(STORE_ACCOUNT_TYPE_CD)) LIKE 'DTC' AND UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'INTERNET%' THEN TOTAL_NETSALES_UNITS ELSE 0 END) AS N_DIG_UNITS
	  ,COUNT(DISTINCT CASE WHEN UPPER(TRIM(RETAILER_DISPLAY_NM)) LIKE '%NFS%' AND UPPER(TRIM(STORE_ACCOUNT_TYPE_CD)) LIKE 'DTC' AND UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'BRICK%' THEN EIS_RETAILER_LOCATION_ID  END) AS NFS_COUNT
	  ,COUNT(DISTINCT CASE WHEN UPPER(TRIM(RETAILER_DISPLAY_NM)) LIKE '%NSO%' AND UPPER(TRIM(STORE_ACCOUNT_TYPE_CD)) LIKE 'DTC' AND UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'BRICK%' THEN EIS_RETAILER_LOCATION_ID END) AS NSO_COUNT
	  ,COUNT(DISTINCT CASE WHEN UPPER(TRIM(STORE_ACCOUNT_TYPE_CD)) LIKE 'WHOLESALE' AND (UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'BRICK%' OR UPPER(TRIM(STORE_SALESMETHOD_TYPE_CD)) LIKE 'OTHER') THEN EIS_RETAILER_LOCATION_ID END) AS WOLESALER_COUNT
	  
FROM
	(SELECT UPPER(TRIM(IMP.CITY_REFERENCE_NM)) AS CITY,
			LPAD(TRIM(UPPER(IMP.RETAILER_LOCATION_POSTAL_CD)), 5, '0') AS ZIP_CODE,
			CASE
				WHEN QUARTER(TO_DATE(IMP.ACTIVITY_END_DT))=1 THEN CONCAT(YEAR(TO_DATE(IMP.ACTIVITY_END_DT)), 'SP')
				WHEN QUARTER(TO_DATE(IMP.ACTIVITY_END_DT))=2 THEN CONCAT(YEAR(TO_DATE(IMP.ACTIVITY_END_DT)), 'SU')
				WHEN QUARTER(TO_DATE(IMP.ACTIVITY_END_DT))=3 THEN CONCAT(YEAR(TO_DATE(IMP.ACTIVITY_END_DT)), 'FA')
				WHEN QUARTER(TO_DATE(IMP.ACTIVITY_END_DT))=4 THEN CONCAT(YEAR(TO_DATE(IMP.ACTIVITY_END_DT)), 'HO')
			END AS YEAR_SSN,
			MMX.UNIV_CATEGORY AS CATEGORY,
			IMP.TOTAL_NETSALES_UNITS,
			IMP.TOTAL_NETSALES_AMT_USD,
			IMP.DIVISION_DESC,
			IMP.PRODUCT_CD,
			IMP.GENDER_AGE_MWBG_DESC AS GENDER,
			IMP.CUSTOM_CHANNEL_NM,
			IMP.RETAILER_DISPLAY_NM,
			IMP.STORE_ACCOUNT_TYPE_CD,
			IMP.STORE_SALESMETHOD_TYPE_CD,
			IMP.EIS_RETAILER_LOCATION_ID
	FROM
		(SELECT CITY_REFERENCE_NM,
				RETAILER_LOCATION_POSTAL_CD,
				ACTIVITY_END_DT,
				PRODUCT_CD,
				GLOBAL_CATEGORY_SUMMARY_DESC AS CATEGORY,
				TOTAL_NETSALES_UNITS,
				TOTAL_NETSALES_AMT_USD,
				DIVISION_DESC,
				GENDER_AGE_MWBG_DESC,
				CUSTOM_CHANNEL_NM,
				RETAILER_DISPLAY_NM,
				STORE_ACCOUNT_TYPE_CD,
				STORE_SALESMETHOD_TYPE_CD,
				EIS_RETAILER_LOCATION_ID
	
		FROM TABLE
		WHERE 1=1 
			AND TRIM(UPPER(RETAILER_GEOGRAPHY_DISPLAY_NM)) LIKE '%NORTH%AMERICA%'
			AND UPPER(TRIM(CITY_REFERENCE_NM)) IS NOT NULL
			--AND TRIM(UPPER(STORE_SALESMETHOD_TYPE_CD)) LIKE '%INTERNET%'
			AND ACTIVITY_END_DT BETWEEN TO_DATE('2015-01-01') AND TO_DATE('2019-06-30')
			AND TRIM(UPPER(DIVISION_DESC)) NOT LIKE '%OTHER%'
			AND TOTAL_NETSALES_AMT_USD > 0
			AND TOTAL_NETSALES_UNITS > 0
			and  (CITY_REFERENCE_NM||RETAILER_DISPLAY_NM) in (select distinct city_rtlr from zip_code_100))IMP
			
	INNER JOIN
	
		(SELECT PROD_PROD_CD,
				TRIM(UPPER(MAX(RPT_CATEGORY_L2))) AS UNIV_CATEGORY
		FROM TABLE
		WHERE PROD_PROD_CD IS NOT NULL
		GROUP BY PROD_PROD_CD) MMX ON IMP.PRODUCT_CD = MMX.PROD_PROD_CD) BASE
	  
WHERE 1=1
  AND UPPER(TRIM(CATEGORY)) NOT IN ('NULL','UNKNOWN','OTHER')
  
GROUP BY CITY,
         CATEGORY,
         YEAR_SSN,
         ZIP_CODE,
         DIVISION_DESC,
         GENDER )B
ON A.CITY=B.CITY
AND A.CATEGORY=B.CATEGORY
AND A.YEAR_SSN=B.YEAR_SSN
AND A.ZIP_CODE=B.ZIP_CODE
AND A.DIVISION_DESC=B.DIVISION_DESC
AND A.GENDER=B.GENDER

LEFT JOIN

(SELECT CITY,
       ZIP_CODE,
       YEAR_SSN,
       CATEGORY,
       DIVISION_DESC,
       GENDER,
	   MAX(CASE WHEN SILHOUETTE LIKE 'HEADWEAR' THEN 1 ELSE 0 END) AS HEADWEAR
      ,MAX(CASE WHEN SILHOUETTE LIKE 'EYEWEAR' THEN 1 ELSE 0 END) AS EYEWEAR
      ,MAX(CASE WHEN SILHOUETTE LIKE 'BOTTOM' THEN 1 ELSE 0 END) AS BOTTOM
      ,MAX(CASE WHEN (SILHOUETTE LIKE 'SHOE' OR SILHOUETTE LIKE 'BOOT'
          OR SILHOUETTE LIKE 'SANDAL') THEN 1 ELSE 0 END) AS SHOE
      ,MAX(CASE WHEN SILHOUETTE LIKE 'TOP' THEN 1 ELSE 0 END) AS TOP
      ,MAX(CASE WHEN SILHOUETTE LIKE 'PROTECTIVE GEAR' THEN 1
            WHEN SILHOUETTE LIKE 'KIT' THEN 1
            WHEN SILHOUETTE LIKE 'NOT APP%' THEN 1
            WHEN SILHOUETTE LIKE 'OTHER%' THEN 1
            WHEN SILHOUETTE LIKE 'MISC%' THEN 1 
            WHEN SILHOUETTE LIKE 'GOLF CLUB' THEN 1
            WHEN SILHOUETTE LIKE 'BALL' THEN 1
            WHEN SILHOUETTE LIKE 'SOCK SHOE' THEN 1
            WHEN SILHOUETTE LIKE 'WETSUIT' THEN 1
            WHEN SILHOUETTE LIKE 'SET%' THEN 1 
            WHEN SILHOUETTE LIKE '%SUIT%' THEN 1
            WHEN SILHOUETTE LIKE 'BAG' THEN 1 
            WHEN SILHOUETTE LIKE 'OTHER' THEN 1 
            WHEN SILHOUETTE LIKE 'GLOVE' THEN 1 ELSE 0 END) AS OTHER_SILHOUETTE
      ,MAX(CASE WHEN SILHOUETTE LIKE 'SOCK' THEN 1 ELSE 0 END) AS SOCK
	  ,CASE WHEN UPPER(TRIM(GENDER)) = 'BOYS' THEN COUNT(DISTINCT PRODUCT_CD) END AS BOYS_PRODUCTS
	  ,CASE WHEN UPPER(TRIM(GENDER)) = 'GIRLS' THEN COUNT(DISTINCT PRODUCT_CD) END AS GIRLS_PRODUCTS
	  ,CASE WHEN UPPER(TRIM(GENDER)) = 'MENS' THEN COUNT(DISTINCT PRODUCT_CD) END AS MENS_PRODUCTS
	  ,CASE WHEN UPPER(TRIM(GENDER)) = 'WOMENS' THEN COUNT(DISTINCT PRODUCT_CD) END AS WOMENS_PRODUCTS
	  FROM
	(SELECT UPPER(TRIM(IMP.CITY_REFERENCE_NM)) AS CITY,
			LPAD(TRIM(UPPER(IMP.RETAILER_LOCATION_POSTAL_CD)), 5, '0') AS ZIP_CODE,
			CASE
				WHEN QUARTER(TO_DATE(IMP.ACTIVITY_END_DT))=1 THEN CONCAT(YEAR(TO_DATE(IMP.ACTIVITY_END_DT)), 'SP')
				WHEN QUARTER(TO_DATE(IMP.ACTIVITY_END_DT))=2 THEN CONCAT(YEAR(TO_DATE(IMP.ACTIVITY_END_DT)), 'SU')
				WHEN QUARTER(TO_DATE(IMP.ACTIVITY_END_DT))=3 THEN CONCAT(YEAR(TO_DATE(IMP.ACTIVITY_END_DT)), 'FA')
				WHEN QUARTER(TO_DATE(IMP.ACTIVITY_END_DT))=4 THEN CONCAT(YEAR(TO_DATE(IMP.ACTIVITY_END_DT)), 'HO')
			END AS YEAR_SSN,
			MMX.UNIV_CATEGORY AS CATEGORY,
			IMP.TOTAL_NETSALES_UNITS,
			IMP.TOTAL_NETSALES_AMT_USD,
			IMP.DIVISION_DESC,
			IMP.PRODUCT_CD,
			IMP.GENDER_AGE_MWBG_DESC AS GENDER,
			IMP.CUSTOM_CHANNEL_NM,
			MMX.SILHOUETTE
			
	FROM
		(SELECT CITY_REFERENCE_NM,
				RETAILER_LOCATION_POSTAL_CD,
				ACTIVITY_END_DT,
				PRODUCT_CD,
				GLOBAL_CATEGORY_SUMMARY_DESC AS CATEGORY,
				TOTAL_NETSALES_UNITS,
				TOTAL_NETSALES_AMT_USD,
				DIVISION_DESC,
				GENDER_AGE_MWBG_DESC,
				CUSTOM_CHANNEL_NM
	
		FROM TABLE
		WHERE 1=1 
			AND TRIM(UPPER(RETAILER_GEOGRAPHY_DISPLAY_NM)) LIKE '%NORTH%AMERICA%'
			AND UPPER(TRIM(CITY_REFERENCE_NM)) IS NOT NULL
			AND TRIM(UPPER(STORE_SALESMETHOD_TYPE_CD)) LIKE '%INTERNET%'
			AND ACTIVITY_END_DT BETWEEN TO_DATE('2015-01-01') AND TO_DATE('2019-06-30')
			AND TRIM(UPPER(DIVISION_DESC)) NOT LIKE '%OTHER%'
			AND TOTAL_NETSALES_AMT_USD > 0
			AND TOTAL_NETSALES_UNITS > 0
			and  (CITY_REFERENCE_NM||RETAILER_DISPLAY_NM) in (select distinct city_rtlr from zip_code_100)) IMP
			
	INNER JOIN
	
		(SELECT PROD_PROD_CD,
				TRIM(UPPER(MAX(RPT_CATEGORY_L2))) AS UNIV_CATEGORY,
				UPPER(TRIM(MAX(MDL_SILH_TYPE_DESC))) AS SILHOUETTE
		FROM TABLE
		WHERE PROD_PROD_CD IS NOT NULL
		GROUP BY PROD_PROD_CD) MMX ON IMP.PRODUCT_CD = MMX.PROD_PROD_CD)
		GROUP BY CITY,
       ZIP_CODE,
       YEAR_SSN,
       CATEGORY,
       DIVISION_DESC,
       GENDER) C
ON A.CITY=C.CITY
AND A.CATEGORY=C.CATEGORY
AND A.YEAR_SSN=C.YEAR_SSN
AND A.ZIP_CODE=C.ZIP_CODE
AND A.DIVISION_DESC=C.DIVISION_DESC
AND A.GENDER=C.GENDER
;

----Level Check----
SELECT COUNT(*), COUNT(DISTINCT CITY, CATEGORY, YEAR_SSN, ZIP_CODE, DIVISION_DESC, GENDER) FROM IMP_NA_TABLE_1010 ;
--2630441, 2630441

SELECT COUNT(DISTINCT CITY) CITY, COUNT(DISTINCT CATEGORY) CATEGORY, COUNT(DISTINCT YEAR_SSN) YEAR_SSN, COUNT(DISTINCT ZIP_CODE) ZIP_CODE, 
COUNT(DISTINCT DIVISION_DESC)  DIVISION_DESC, COUNT(DISTINCT GENDER) GENDER
FROM IMP_NA_TABLE_1010;
-- 11 |	14 | 18	| 5766	| 3	| 4


select distinct division_desc from IMP_NA_TABLE_1010;


--- CREATING A SUBSET OF DOL PULLING ALL THE REQUIRED RAW FIELDS AT POSTAL-SECTOR x CATEGORY x YEAR_SSN LEVEL ---
CREATE OR REPLACE temp TABLE DOL_NA_TABLE_1010 AS
SELECT DOL.POSTAL_CODE,
       DOL.ORIGL_ORDERED_QTY,
       DOL.CANCEL_QTY,
       DOL.RTN_QTY,
       DOL.GRD_AMT_EXCL_TAX_USD,
       DOL.MEMBER_ID,
       DOL.ORDER_DT,
       DOL.YEAR_SSN,
       DOL.UNIV_STYLE_COLOR_CD,
       DOL.ORDER_LINE_KEY,
       DOL.ORDER_HDR_KEY,
       DOL.ORIGIN_OF_ORDER_CD,
       DOL.TOT_LINE_ITEM_DISC_AMT_LC,
       DOL.LC_TO_USD_RATE,
       DOL.MARKETING_CHNL_KEY,
       DOL.UNIV_GENDERAGE_ROLLUP,
       DOL.UNIV_DIV_DESC,
       MMX.UNIV_CATEGORY AS UNIV_CATEGORY,
	   DOL.UPM_ID
	   
FROM
  (SELECT LPAD(TRIM(UPPER(SHIP_POSTAL_CD)), 5, '0') AS POSTAL_CODE,
          ORIGL_ORDERED_QTY,
          CANCEL_QTY,
          RTN_QTY,
          GRD_AMT_EXCL_TAX_USD,
          MEMBER_ID,
          ORDER_DT,
          CASE
              WHEN QUARTER(TO_DATE(ORDER_DT))=1 THEN CONCAT(YEAR(TO_DATE(ORDER_DT)), 'SP')
              WHEN QUARTER(TO_DATE(ORDER_DT))=2 THEN CONCAT(YEAR(TO_DATE(ORDER_DT)), 'SU')
              WHEN QUARTER(TO_DATE(ORDER_DT))=3 THEN CONCAT(YEAR(TO_DATE(ORDER_DT)), 'FA')
              WHEN QUARTER(TO_DATE(ORDER_DT))=4 THEN CONCAT(YEAR(TO_DATE(ORDER_DT)), 'HO')
          END AS YEAR_SSN,
          UNIV_STYLE_COLOR_CD,
          UNIV_CAT_DESC,
          ORDER_LINE_KEY,
          ORDER_HDR_KEY,
          ORIGIN_OF_ORDER_CD,
          TOT_LINE_ITEM_DISC_AMT_LC,
          LC_TO_USD_RATE,
          MARKETING_CHNL_KEY,
          UNIV_GENDERAGE_ROLLUP,
          CASE
              WHEN UPPER(TRIM(UNIV_DIV_DESC))='APPAREL' THEN 'APPAREL DIVISION'
              WHEN UPPER(TRIM(UNIV_DIV_DESC))='EQUIPMENT' THEN 'EQUIPMENT DIVISION'
              WHEN UPPER(TRIM(UNIV_DIV_DESC))='FOOTWEAR' THEN 'FOOTWEAR DIVISION'              
        END AS UNIV_DIV_DESC,
		UPM_ID
		  
   FROM TABLE
   WHERE TO_DATE(ORDER_DT) BETWEEN TO_DATE('2015-01-01') AND TO_DATE('2019-06-30')
     AND ORIGL_ORDERED_QTY > 0
     AND UPPER(SHIP_REGION_CD) LIKE '%NA%'
     AND SWOOSH_IND != 1
     AND CANCEL_IND != 1
     AND GRD_AMT_EXCL_TAX_LC > 0
     AND GRD_AMT_EXCL_TAX_USD > 0
     AND AUTHORIZED_IND = 1
     AND REC_EXCL_IND = 0
     AND LPAD(TRIM(UPPER(SHIP_POSTAL_CD)), 5, '0') IN
       (SELECT DISTINCT ZIP_CODE
        FROM IMP_NA_TABLE_1010) ) DOL
		
INNER JOIN

  (SELECT PROD_PROD_CD,
          TRIM(UPPER(MAX(RPT_CATEGORY_L2))) AS UNIV_CATEGORY
   FROM TABLE
   WHERE PROD_PROD_CD IS NOT NULL
   GROUP BY PROD_PROD_CD) MMX ON DOL.UNIV_STYLE_COLOR_CD = MMX.PROD_PROD_CD;        

----Level Check----		
SELECT COUNT(*), COUNT(DISTINCT ORDER_LINE_KEY) FROM DOL_NA_TABLE_1010 ;		
-- 27847595, 27847595
		
--CREATING DOL ROLLED UP BASE TABLE AT ZIP, SEASON, CATGEORY, DIVISION, GENDER LEVEL--
CREATE OR REPLACE TABLE DOL_NA_TABLE_ROLLEDUP_1010
AS
SELECT
A.POSTAL_CODE,
A.GROSS_SALES_UNITS,
A.NET_SALES_UNITS,
A.ORDERS,
A.SALES_DOLLARS,
A.BUYERS_DOL,
A.CONSUMER_COUNT,
A.UNIV_CATEGORY,
A.YEAR_SSN,
A.UNIV_GENDERAGE_ROLLUP,	
A.UNIV_DIV_DESC,
A.UNITS_PER_BUYER,
A.AOV,
A.UPT,
A.DEMAND_PER_BUYER,
A.ORDER_PER_BUYER,
A.DOTCOM_DMND_SALES,
A.DOTCOM_DMND_UNITS,
A.DOTCOM_DMND_ORDERS,
A.SNKRS_DMND_SALES,
A.SNKRS_DMND_UNITS,
A.SNKRS_DMND_ORDERS,
A.NPLUS_DMND_SALES,
A.NPLUS_DMND_UNITS,
A.NPLUS_DMND_ORDERS,
A.DOTCOM_BUYERS,
A.SNKRS_BUYERS,
A.NPLUS_BUYERS,
A.FULLPRICE_UNITS,
A.MARKDOWN_UNITS,
A.CLEARANCE_UNITS,
A.BUYERS_COHORT_0_20, 
A.BUYERS_COHORT_20_40, 
A.BUYERS_COHORT_40_60,
A.BUYERS_COHORT_60_80, 
A.BUYERS_COHORT_80_100,
A.BUYERS_COHORT_100_150,
A.BUYERS_COHORT_150_200,
A.BUYERS_COHORT_200_250,
A.BUYERS_COHORT_250_300,
A.BUYERS_COHORT_300_PLUS,
A.CLEARANCE_BUYERS,
A.MARKDOWN_BUYERS,
A.FULLPRICE_BUYERS,
A.PAID_SEARCH_MKT_CHNL_ORDERS,
A.AFFILIATES_MKT_CHNL_ORDERS,
A.EMAIL_MKT_CHNL_ORDERS,
A.SOCIAL_MKT_CHNL_ORDERS,
A.NATURAL_SEARCH_MKT_CHNL_ORDERS,
A.DIRECT_LOAD_MKT_CHNL_ORDERS,
A.BRAND_MKT_CHNL_ORDERS
 
FROM
(
	SELECT DOL.POSTAL_CODE
    ,DOL.UNIV_CATEGORY
    ,DOL.YEAR_SSN
	,DOL.UNIV_GENDERAGE_ROLLUP
	,DOL.UNIV_DIV_DESC
    ,NVL(SUM(DOL.ORIGL_ORDERED_QTY),0) - SUM(ABS(NVL(DOL.CANCEL_QTY,0))) - SUM(ABS(NVL(DOL.RTN_QTY,0))) As NET_SALES_UNITS
    ,NVL(SUM(DOL.ORIGL_ORDERED_QTY),0) AS GROSS_SALES_UNITS
    ,NVL(SUM(ROUND(DOL.GRD_AMT_EXCL_TAX_USD, 2)),0) AS SALES_DOLLARS
	,COUNT(DISTINCT DOL.ORDER_HDR_KEY) AS ORDERS
    ,COUNT(DISTINCT DOL.MEMBER_ID) AS BUYERS_DOL
	,COUNT(DISTINCT DOL.UPM_ID) AS CONSUMER_COUNT
	,SUM(CASE WHEN DOL.ORIGIN_OF_ORDER_CD IN ('0', '1', '300', '400', '500', '800', '40', '56') THEN DOL.GRD_AMT_EXCL_TAX_USD ELSE 0 END) AS DOTCOM_DMND_SALES
	,SUM(CASE WHEN DOL.ORIGIN_OF_ORDER_CD IN ('0', '1', '300', '400', '500', '800', '40', '56') THEN DOL.ORIGL_ORDERED_QTY ELSE 0 END) AS DOTCOM_DMND_UNITS
	,COUNT(DISTINCT CASE WHEN DOL.ORIGIN_OF_ORDER_CD IN ('0', '1', '300', '400', '500', '800', '40', '56') THEN  DOL.ORDER_HDR_KEY END) AS DOTCOM_DMND_ORDERS
	,COUNT(DISTINCT CASE WHEN DOL.ORIGIN_OF_ORDER_CD IN ('0', '1', '300', '400', '500', '800', '40', '56') THEN  DOL.MEMBER_ID END) AS DOTCOM_BUYERS
	,SUM(CASE WHEN DOL.ORIGIN_OF_ORDER_CD  IN ('606','605','413','2','304','504','414','303') THEN DOL.GRD_AMT_EXCL_TAX_USD ELSE 0 END) AS SNKRS_DMND_SALES
	,SUM(CASE WHEN DOL.ORIGIN_OF_ORDER_CD  IN ('606','605','413','2','304','504','414','303') THEN DOL.ORIGL_ORDERED_QTY ELSE 0 END) AS SNKRS_DMND_UNITS
	,COUNT(DISTINCT CASE WHEN DOL.ORIGIN_OF_ORDER_CD  IN ('606','605','413','2','304','504','414','303','503') THEN DOL.ORDER_HDR_KEY END) AS SNKRS_DMND_ORDERS
	,COUNT(DISTINCT CASE WHEN DOL.ORIGIN_OF_ORDER_CD  IN ('606','605','413','2','304','504','414','303','503') THEN DOL.MEMBER_ID END) AS SNKRS_BUYERS
	,SUM(CASE WHEN DOL.ORIGIN_OF_ORDER_CD IN ('24') THEN DOL.GRD_AMT_EXCL_TAX_USD ELSE 0 END) AS NPLUS_DMND_SALES
	,SUM(CASE WHEN DOL.ORIGIN_OF_ORDER_CD IN ('24') THEN DOL.ORIGL_ORDERED_QTY ELSE 0 END) AS NPLUS_DMND_UNITS
	,COUNT(DISTINCT CASE WHEN DOL.ORIGIN_OF_ORDER_CD IN ('24') THEN  DOL.ORDER_HDR_KEY END) AS NPLUS_DMND_ORDERS
	,COUNT(DISTINCT CASE WHEN DOL.ORIGIN_OF_ORDER_CD IN ('24') THEN  DOL.MEMBER_ID END) AS NPLUS_BUYERS
	
	,CASE 
     WHEN NVL(COUNT(DISTINCT DOL.MEMBER_ID), 0) = 0 THEN 0
     ELSE NVL(SUM(DOL.ORIGL_ORDERED_QTY),0) / COUNT(DISTINCT DOL.MEMBER_ID)
	 END AS UNITS_PER_BUYER
	 
	,CASE 
     WHEN NVL(COUNT(DISTINCT DOL.ORDER_HDR_KEY), 0) = 0 THEN 0
     ELSE NVL(SUM(ROUND(DOL.GRD_AMT_EXCL_TAX_USD, 2)),0) / COUNT(DISTINCT DOL.ORDER_HDR_KEY)
     END AS AOV
	 
	,CASE 
     WHEN NVL(COUNT(DISTINCT DOL.ORDER_HDR_KEY), 0) = 0 THEN 0
     ELSE NVL(SUM(DOL.ORIGL_ORDERED_QTY),0) / COUNT(DISTINCT DOL.ORDER_HDR_KEY)
     END AS UPT
	 
	,CASE 
     WHEN NVL(COUNT(DISTINCT DOL.MEMBER_ID), 0) = 0 THEN 0
     ELSE NVL(SUM(ROUND(DOL.GRD_AMT_EXCL_TAX_USD, 2)),0) / COUNT(DISTINCT DOL.MEMBER_ID)
     END AS DEMAND_PER_BUYER
	 
	,CASE 
     WHEN NVL(COUNT(DISTINCT DOL.MEMBER_ID), 0) = 0 THEN 0
     ELSE NVL(COUNT(DISTINCT DOL.ORDER_HDR_KEY), 0) / COUNT(DISTINCT DOL.MEMBER_ID)
     END AS ORDER_PER_BUYER
	 
	,SUM(CASE WHEN (DOL.TOT_LINE_ITEM_DISC_AMT_LC * DOL.LC_TO_USD_RATE) / ((DOL.TOT_LINE_ITEM_DISC_AMT_LC * DOL.LC_TO_USD_RATE) + (DOL.GRD_AMT_EXCL_TAX_USD)) * 100 >= 0 
	AND (DOL.TOT_LINE_ITEM_DISC_AMT_LC * DOL.LC_TO_USD_RATE) / ((DOL.TOT_LINE_ITEM_DISC_AMT_LC * DOL.LC_TO_USD_RATE) + (DOL.GRD_AMT_EXCL_TAX_USD)) * 100 <= 10
	THEN DOL.ORIGL_ORDERED_QTY END) AS FULLPRICE_UNITS

	,SUM(CASE WHEN (DOL.TOT_LINE_ITEM_DISC_AMT_LC * DOL.LC_TO_USD_RATE) / ((DOL.TOT_LINE_ITEM_DISC_AMT_LC * DOL.LC_TO_USD_RATE) + (DOL.GRD_AMT_EXCL_TAX_USD)) * 100 > 10 
	AND (DOL.TOT_LINE_ITEM_DISC_AMT_LC * DOL.LC_TO_USD_RATE) / ((DOL.TOT_LINE_ITEM_DISC_AMT_LC * DOL.LC_TO_USD_RATE) + (DOL.GRD_AMT_EXCL_TAX_USD)) * 100 <= 50 
	THEN DOL.ORIGL_ORDERED_QTY END) AS MARKDOWN_UNITS
	
	,SUM(CASE WHEN (DOL.TOT_LINE_ITEM_DISC_AMT_LC * DOL.LC_TO_USD_RATE) / ((DOL.TOT_LINE_ITEM_DISC_AMT_LC * DOL.LC_TO_USD_RATE) + (DOL.GRD_AMT_EXCL_TAX_USD)) * 100 > 50 
	THEN DOL.ORIGL_ORDERED_QTY END) AS CLEARANCE_UNITS
	 
	,COUNT(DISTINCT CASE WHEN DOL.GRD_AMT_EXCL_TAX_USD >= 0 AND DOL.GRD_AMT_EXCL_TAX_USD < 20 THEN DOL.MEMBER_ID END) AS BUYERS_COHORT_0_20 
	,COUNT(DISTINCT CASE WHEN DOL.GRD_AMT_EXCL_TAX_USD >= 20 AND DOL.GRD_AMT_EXCL_TAX_USD < 40 THEN DOL.MEMBER_ID END) AS BUYERS_COHORT_20_40 
	,COUNT(DISTINCT CASE WHEN DOL.GRD_AMT_EXCL_TAX_USD >= 40 AND DOL.GRD_AMT_EXCL_TAX_USD < 60 THEN DOL.MEMBER_ID END) AS BUYERS_COHORT_40_60 
	,COUNT(DISTINCT CASE WHEN DOL.GRD_AMT_EXCL_TAX_USD >= 60 AND DOL.GRD_AMT_EXCL_TAX_USD < 80 THEN DOL.MEMBER_ID END) AS BUYERS_COHORT_60_80 
	,COUNT(DISTINCT CASE WHEN DOL.GRD_AMT_EXCL_TAX_USD >= 80 AND DOL.GRD_AMT_EXCL_TAX_USD < 100 THEN DOL.MEMBER_ID END) AS BUYERS_COHORT_80_100
	,COUNT(DISTINCT CASE WHEN DOL.GRD_AMT_EXCL_TAX_USD >= 100 AND DOL.GRD_AMT_EXCL_TAX_USD < 150 THEN DOL.MEMBER_ID END) AS BUYERS_COHORT_100_150
	,COUNT(DISTINCT CASE WHEN DOL.GRD_AMT_EXCL_TAX_USD >= 150 AND DOL.GRD_AMT_EXCL_TAX_USD < 200 THEN DOL.MEMBER_ID END) AS BUYERS_COHORT_150_200
	,COUNT(DISTINCT CASE WHEN DOL.GRD_AMT_EXCL_TAX_USD >= 200 AND DOL.GRD_AMT_EXCL_TAX_USD < 250 THEN DOL.MEMBER_ID END) AS BUYERS_COHORT_200_250
	,COUNT(DISTINCT CASE WHEN DOL.GRD_AMT_EXCL_TAX_USD >= 250 AND DOL.GRD_AMT_EXCL_TAX_USD < 300 THEN DOL.MEMBER_ID END) AS BUYERS_COHORT_250_300
	,COUNT(DISTINCT CASE WHEN DOL.GRD_AMT_EXCL_TAX_USD >= 300 THEN DOL.MEMBER_ID END) AS BUYERS_COHORT_300_PLUS	
	 
	 
	,COUNT(DISTINCT CASE WHEN (DOL.TOT_LINE_ITEM_DISC_AMT_LC * DOL.LC_TO_USD_RATE) / ((DOL.TOT_LINE_ITEM_DISC_AMT_LC * DOL.LC_TO_USD_RATE) + (DOL.GRD_AMT_EXCL_TAX_USD)) * 100 >= 0 
	AND (DOL.TOT_LINE_ITEM_DISC_AMT_LC * DOL.LC_TO_USD_RATE) / ((DOL.TOT_LINE_ITEM_DISC_AMT_LC * DOL.LC_TO_USD_RATE) + (DOL.GRD_AMT_EXCL_TAX_USD)) * 100 <= 10
	THEN DOL.MEMBER_ID END) AS FULLPRICE_BUYERS

	,COUNT(DISTINCT CASE WHEN (DOL.TOT_LINE_ITEM_DISC_AMT_LC * DOL.LC_TO_USD_RATE) / ((DOL.TOT_LINE_ITEM_DISC_AMT_LC * DOL.LC_TO_USD_RATE) + (DOL.GRD_AMT_EXCL_TAX_USD)) * 100 > 10 
	AND (DOL.TOT_LINE_ITEM_DISC_AMT_LC * DOL.LC_TO_USD_RATE) / ((DOL.TOT_LINE_ITEM_DISC_AMT_LC * DOL.LC_TO_USD_RATE) + (DOL.GRD_AMT_EXCL_TAX_USD)) * 100 <= 50 
	THEN DOL.MEMBER_ID END) AS MARKDOWN_BUYERS
	
	,COUNT(DISTINCT CASE WHEN (DOL.TOT_LINE_ITEM_DISC_AMT_LC * DOL.LC_TO_USD_RATE) / ((DOL.TOT_LINE_ITEM_DISC_AMT_LC * DOL.LC_TO_USD_RATE) + (DOL.GRD_AMT_EXCL_TAX_USD)) * 100 > 50 
	THEN DOL.MEMBER_ID END) AS CLEARANCE_BUYERS
	 
	,COUNT(DISTINCT CASE WHEN DOL.MARKETING_CHNL_KEY = 1 THEN DOL.ORDER_HDR_KEY END) AS PAID_SEARCH_MKT_CHNL_ORDERS
	,COUNT(DISTINCT CASE WHEN DOL.MARKETING_CHNL_KEY = 3 THEN DOL.ORDER_HDR_KEY END) AS AFFILIATES_MKT_CHNL_ORDERS
	,COUNT(DISTINCT CASE WHEN DOL.MARKETING_CHNL_KEY IN (6,19) THEN DOL.ORDER_HDR_KEY END) AS EMAIL_MKT_CHNL_ORDERS
	,COUNT(DISTINCT CASE WHEN DOL.MARKETING_CHNL_KEY IN (7,10) THEN DOL.ORDER_HDR_KEY END) AS SOCIAL_MKT_CHNL_ORDERS
	,COUNT(DISTINCT CASE WHEN DOL.MARKETING_CHNL_KEY = 9 THEN DOL.ORDER_HDR_KEY END) AS NATURAL_SEARCH_MKT_CHNL_ORDERS
	,COUNT(DISTINCT CASE WHEN DOL.MARKETING_CHNL_KEY IN (11,12,13,14) THEN DOL.ORDER_HDR_KEY END) AS DIRECT_LOAD_MKT_CHNL_ORDERS
	,COUNT(DISTINCT CASE WHEN DOL.MARKETING_CHNL_KEY IN (15,16,17,18,20,21,22) THEN DOL.ORDER_HDR_KEY END) AS BRAND_MKT_CHNL_ORDERS
	
    FROM DOL 

    GROUP BY DOL.POSTAL_CODE,
    DOL.UNIV_CATEGORY,
    DOL.YEAR_SSN,
	DOL.UNIV_GENDERAGE_ROLLUP,	
	DOL.UNIV_DIV_DESC
) A;

select distinct UNIV_DIV_DESC from DOL_NA_TABLE_ROLLEDUP_1010;

----Level Check----		
SELECT COUNT(*), COUNT(DISTINCT POSTAL_CODE, YEAR_SSN, UNIV_CATEGORY, UNIV_GENDERAGE_ROLLUP, UNIV_DIV_DESC) FROM DOL_NA_TABLE_ROLLEDUP_1010;
----2935285, 2935285

SELECT DISTINCT POSTAL_CODE, YEAR_SSN, UNIV_CATEGORY, UNIV_GENDERAGE_ROLLUP, UNIV_DIV_DESC FROM DOL_NA_TABLE_ROLLEDUP_1010;

--COMBINING RESULTS FROM IMO AND DOL TABLES--
CREATE OR REPLACE temp TABLE NK_DIG_SLS_ZIP_CAT_SSN_NA_1010
AS
SELECT 
IMP.CITY AS CITY
,IMP.ZIP_CODE AS POSTAL_CODE
,IMP.YEAR_SSN
,IMP.CATEGORY AS UNIV_CATEGORY
,IMP.DIVISION_DESC AS DIVISION
,IMP.GENDER
,COALESCE(IMP.NET_SALES_UNITS,0) AS NET_SALES_UNITS
,COALESCE(IMP.MP_AUR,0) AS MP_AUR
,COALESCE(DOL.ORDERS,0) AS ORDERS
,COALESCE(IMP.SALES_DOLLARS,0) AS SALES_DOLLARS
,COALESCE(DOL.BUYERS_DOL,0) AS BUYERS_DOL
,COALESCE(DOL.UNITS_PER_BUYER,0) AS UNITS_PER_BUYER
,COALESCE(DOL.AOV,0) AS AOV
,COALESCE(DOL.UPT,0) AS UPT
,COALESCE(DOL.DEMAND_PER_BUYER,0) AS DEMAND_PER_BUYER
,COALESCE(DOL.ORDER_PER_BUYER,0) AS ORDER_PER_BUYER
,COALESCE(DOL.DOTCOM_DMND_SALES,0) AS DOTCOM_DMND_SALES
,COALESCE(DOL.DOTCOM_DMND_UNITS,0) AS DOTCOM_DMND_UNITS
,COALESCE(DOL.DOTCOM_DMND_ORDERS,0) AS DOTCOM_DMND_ORDERS
,COALESCE(DOL.SNKRS_DMND_SALES,0) AS SNKRS_DMND_SALES
,COALESCE(DOL.SNKRS_DMND_UNITS,0) AS SNKRS_DMND_UNITS
,COALESCE(DOL.SNKRS_DMND_ORDERS,0) AS SNKRS_DMND_ORDERS
,COALESCE(DOL.NPLUS_DMND_SALES,0) AS NPLUS_DMND_SALES
,COALESCE(DOL.NPLUS_DMND_UNITS,0) AS NPLUS_DMND_UNITS
,COALESCE(DOL.NPLUS_DMND_ORDERS,0) AS NPLUS_DMND_ORDERS
,COALESCE(DOL.DOTCOM_BUYERS,0) AS DOTCOM_BUYERS
,COALESCE(DOL.SNKRS_BUYERS,0) AS SNKRS_BUYERS
,COALESCE(DOL.NPLUS_BUYERS,0) AS NPLUS_BUYERS
,COALESCE(DOL.FULLPRICE_UNITS,0) AS FULLPRICE_UNITS
,COALESCE(DOL.MARKDOWN_UNITS,0) AS MARKDOWN_UNITS
,COALESCE(DOL.CLEARANCE_UNITS,0) AS CLEARANCE_UNITS
,COALESCE(IMP.N_DOTCOM_SALES_IMP,0) AS N_DOTCOM_SALES_IMP
,COALESCE(IMP.DEPARTMENT_STORE_SALES,0) AS DEPARTMENT_STORE_SALES
,COALESCE(IMP.ATHLETIC_SPECIALTY_SALES,0) AS ATHLETIC_SPECIALTY_SALES
,COALESCE(IMP.SPORTING_GOODS_SALES,0) AS SPORTING_GOODS_SALES
,COALESCE(IMP.CATEGORY_SPECIALTY_SALES,0) AS CATEGORY_SPECIALTY_SALES
,COALESCE(IMP.GENERAL_FOOTWEAR_SALES,0) AS GENERAL_FOOTWEAR_SALES
,COALESCE(IMP.NSO_SALES,0) AS NSO_SALES
,COALESCE(IMP.N_DOTCOM_UNITS_IMP,0) AS N_DOTCOM_UNITS_IMP
,COALESCE(IMP.DEPARTMENT_STORE_UNITS,0) AS DEPARTMENT_STORE_UNITS
,COALESCE(IMP.ATHLETIC_SPECIALTY_UNITS,0) AS ATHLETIC_SPECIALTY_UNITS
,COALESCE(IMP.SPORTING_GOODS_UNITS,0) AS SPORTING_GOODS_UNITS
,COALESCE(IMP.CATEGORY_SPECIALTY_UNITS,0) AS CATEGORY_SPECIALTY_UNITS
,COALESCE(IMP.GENERAL_FOOTWEAR_UNITS,0) AS GENERAL_FOOTWEAR_UNITS
,COALESCE(IMP.NSO_UNITS,0) AS NSO_UNITS
,COALESCE(IMP.N_FS,0) AS 				N_FS
,COALESCE(IMP.N_SO,0) AS                 N_SO
,COALESCE(IMP.N_PARTNER,0) AS            N_PARTNER
,COALESCE(IMP.N_PARTNER_DIG,0) AS        N_PARTNER_DIG
,COALESCE(IMP.N_DIG,0) AS                N_DIG
,COALESCE(IMP.N_FS_SALES,0) AS           N_FS_SALES
,COALESCE(IMP.N_SO_SALES,0) AS           N_SO_SALES
,COALESCE(IMP.N_PARTNER_SALES,0) AS      N_PARTNER_SALES
,COALESCE(IMP.N_PARTNER_DIG_SALES,0) AS  N_PARTNER_DIG_SALES
,COALESCE(IMP.N_DIG_SALES,0) AS          N_DIG_SALES
,COALESCE(IMP.N_FS_UNITS,0) AS           N_FS_UNITS
,COALESCE(IMP.N_SO_UNITS,0) AS           N_SO_UNITS
,COALESCE(IMP.N_PARTNER_UNITS,0) AS      N_PARTNER_UNITS
,COALESCE(IMP.N_PARTNER_DIG_UNITS,0) AS  N_PARTNER_DIG_UNITS
,COALESCE(IMP.N_DIG_UNITS,0) AS          N_DIG_UNITS
,COALESCE(IMP.NFS_COUNT,0) AS               NFS_COUNT
,COALESCE(IMP.NSO_COUNT,0) AS               NSO_COUNT
,COALESCE(IMP.WOLESALER_COUNT,0) AS         WOLESALER_COUNT
,COALESCE(IMP.HEADWEAR,0) AS                HEADWEAR
,COALESCE(IMP.EYEWEAR,0) AS                 EYEWEAR
,COALESCE(IMP.BOTTOM,0) AS                  BOTTOM
,COALESCE(IMP.OTHER_SILHOUETTE,0) AS        OTHER_SILHOUETTE
,COALESCE(IMP.TOP,0) AS                     TOP
,COALESCE(IMP.SHOE,0) AS                    SHOE
,COALESCE(IMP.SOCK,0) AS                    SOCK
,COALESCE(IMP.BOYS_PRODUCTS,0) AS           BOYS_PRODUCTS
,COALESCE(IMP.GIRLS_PRODUCTS,0) AS          GIRLS_PRODUCTS
,COALESCE(IMP.MENS_PRODUCTS,0) AS           MENS_PRODUCTS
,COALESCE(IMP.WOMENS_PRODUCTS,0) AS         WOMENS_PRODUCTS
,COALESCE(DOL.CONSUMER_COUNT,0) AS CONSUMER_COUNT
,COALESCE(DOL.BUYERS_COHORT_0_20,0) AS BUYERS_COHORT_0_20
,COALESCE(DOL.BUYERS_COHORT_20_40,0) AS BUYERS_COHORT_20_40
,COALESCE(DOL.BUYERS_COHORT_40_60,0) AS BUYERS_COHORT_40_60
,COALESCE(DOL.BUYERS_COHORT_60_80,0) AS BUYERS_COHORT_60_80
,COALESCE(DOL.BUYERS_COHORT_80_100,0) AS BUYERS_COHORT_80_100
,COALESCE(DOL.BUYERS_COHORT_100_150,0) AS BUYERS_COHORT_100_150
,COALESCE(DOL.BUYERS_COHORT_150_200,0) AS BUYERS_COHORT_150_200
,COALESCE(DOL.BUYERS_COHORT_200_250,0) AS BUYERS_COHORT_200_250
,COALESCE(DOL.BUYERS_COHORT_250_300,0) AS BUYERS_COHORT_250_300
,COALESCE(DOL.BUYERS_COHORT_300_PLUS,0) AS BUYERS_COHORT_300_PLUS
,COALESCE(DOL.CLEARANCE_BUYERS,0) AS CLEARANCE_BUYERS
,COALESCE(DOL.MARKDOWN_BUYERS,0) AS MARKDOWN_BUYERS
,COALESCE(DOL.FULLPRICE_BUYERS,0) AS FULLPRICE_BUYERS
,COALESCE(DOL.PAID_SEARCH_MKT_CHNL_ORDERS, 0) AS PAID_SEARCH_MKT_CHNL_ORDERS
,COALESCE(DOL.AFFILIATES_MKT_CHNL_ORDERS, 0) AS AFFILIATES_MKT_CHNL_ORDERS
,COALESCE(DOL.EMAIL_MKT_CHNL_ORDERS, 0) AS EMAIL_MKT_CHNL_ORDERS
,COALESCE(DOL.SOCIAL_MKT_CHNL_ORDERS, 0) AS SOCIAL_MKT_CHNL_ORDERS
,COALESCE(DOL.NATURAL_SEARCH_MKT_CHNL_ORDERS, 0) AS NATURAL_SEARCH_MKT_CHNL_ORDERS
,COALESCE(DOL.DIRECT_LOAD_MKT_CHNL_ORDERS, 0) AS DIRECT_LOAD_MKT_CHNL_ORDERS
,COALESCE(DOL.BRAND_MKT_CHNL_ORDERS, 0) AS BRAND_MKT_CHNL_ORDERS

FROM

IMP_NA_TABLE_1010 IMP
LEFT JOIN
DOL_NA_TABLE_ROLLEDUP_1010 DOL

ON UPPER(TRIM(IMP.ZIP_CODE)) = UPPER(TRIM(DOL.POSTAL_CODE))
AND UPPER(TRIM(IMP.YEAR_SSN)) = UPPER(TRIM(DOL.YEAR_SSN))
AND UPPER(TRIM(IMP.CATEGORY)) = UPPER(TRIM(DOL.UNIV_CATEGORY))
AND UPPER(TRIM(IMP.DIVISION_DESC)) = UPPER(TRIM(DOL.UNIV_DIV_DESC))	
AND UPPER(TRIM(IMP.GENDER)) = UPPER(TRIM(DOL.UNIV_GENDERAGE_ROLLUP));


--LEVEL CHECK--
SELECT COUNT(*), COUNT(DISTINCT CITY, POSTAL_CODE, YEAR_SSN, UNIV_CATEGORY, GENDER , DIVISION) FROM NK_DIG_SLS_ZIP_CAT_SSN_NA_1010;
-- 2630441, 2630441
SELECT * FROM NK_DIG_SLS_ZIP_CAT_SSN_NA_1010;


--Add SPOTZI data
CREATE OR REPLACE temp TABLE NK_DIG_SLS_ZIP_CAT_SSN_DEMO_NA_1010 AS
SELECT
A.*
,CASE 
WHEN LEFT(YEAR_SSN, 4) = '2015' AND B.DI_PC IS NOT NULL THEN B.DI_PC * 1.022
WHEN LEFT(YEAR_SSN, 4) = '2016' AND C.DI_PC IS NOT NULL THEN C.DI_PC * 0.965
WHEN LEFT(YEAR_SSN, 4) = '2017' AND C.DI_PC IS NOT NULL THEN C.DI_PC
WHEN LEFT(YEAR_SSN, 4) = '2018' AND C.DI_PC IS NOT NULL THEN C.DI_PC * 1.046
WHEN LEFT(YEAR_SSN, 4) = '2019' AND C.DI_PC IS NOT NULL THEN C.DI_PC * 1.03 * 1.046
WHEN LEFT(YEAR_SSN, 4) = '2015' AND B.DI_PC IS NULL THEN 42737
WHEN LEFT(YEAR_SSN, 4) = '2016' AND C.DI_PC IS NULL THEN 43913
WHEN LEFT(YEAR_SSN, 4) = '2017' AND C.DI_PC IS NULL THEN 45100
WHEN LEFT(YEAR_SSN, 4) = '2018' AND C.DI_PC IS NULL THEN 47612
WHEN LEFT(YEAR_SSN, 4) = '2019' AND C.DI_PC IS NULL THEN 48475
ELSE 45100
END AS DI_PC
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.TPOP
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.TPOP
	END AS TOTAL_POP
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.PDENS
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.PDENS END AS POP_DENSITY
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.THH
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.THH END AS TOTAL_HOUSEHOLD
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.HHSIZE
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN B.HHSIZE END AS HOUSEHOLD_SIZE
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.MPOP
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.MPOP END AS MALE_POP
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.FPOP
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.FPOP END AS FEMALE_POP
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.TPOP_AGE01
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.TPOP_AGE_0_14 END AS TOTAL_POP_AGE0_14
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.TPOP_AGE02
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.TPOP_AGE_15_29 END AS TOTAL_POP_AGE15_29
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.TPOP_AGE03
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.TPOP_AGE_30_44 END AS TOTAL_POP_AGE30_44
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.TPOP_AGE04
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.TPOP_AGE_45_59 END AS TOTAL_POP_AGE45_59
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.TPOP_AGE05
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.TPOP_AGE_60_ABOVE END AS TOTAL_POP_AGE60UP
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.MPOP_AGE01
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.MPOP_AGE_0_14 END AS MALE_POP_AGE0_14
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.MPOP_AGE02
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.MPOP_AGE_15_29 END AS MALE_POP_AGE15_29
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.MPOP_AGE03
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.MPOP_AGE_30_44 END AS MALE_POP_AGE30_44
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.MPOP_AGE04
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.MPOP_AGE_45_59 END AS MALE_POP_AGE45_59
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.MPOP_AGE05
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.MPOP_AGE_60_ABOVE END AS MALE_POP_AGE60UP
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.FPOP_AGE01
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.FPOP_AGE_0_14 END AS FEMALE_POP_AGE0_14
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.FPOP_AGE02
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.FPOP_AGE_15_29 END AS FEMALE_POP_AGE15_29
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.FPOP_AGE03
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.FPOP_AGE_30_44 END AS FEMALE_POP_AGE30_44
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.FPOP_AGE04
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.FPOP_AGE_45_59 END AS FEMALE_POP_AGE45_59
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.FPOP_AGE05
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.FPOP_AGE_60_ABOVE END AS FEMALE_POP_AGE60UP
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.DI
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.DI END AS DISPOSABLE_INCOME
,CASE WHEN LEFT (YEAR_SSN, 4) IN ('2015','2016') THEN B.DI_IX
	WHEN LEFT (YEAR_SSN, 4) IN ('2017','2018','2019') THEN C.DI_IX END AS DISPOSABLE_INCOME_INDEX
,D.SP2A AS CLOTHING_SPOTZI
,D.SP2A_PC AS CLOTHING_PER_CAPITA
,D.SP2A_IX AS CLOTHING_INDEX
,D.SP2B AS FOOTWEAR_SPOTZI
,D.SP2B_PC AS FOOTWEAR_PER_CAPITA
,D.SP2B_IX AS FOOTWEAR_INDEX
,D.SP4B AS REC_HOBBIES_SPOTZI
,D.SP4B_PC AS RECREATION_HOBBIES_PER_CAPITA
,D.SP4B_IX AS RECREATION_HOBBIES_INDEX
FROM (SELECT * FROM NK_DIG_SLS_ZIP_CAT_SSN_NA_1010) A
LEFT JOIN 
(SELECT * FROM USA_DEMOGRAPHICS_2014) B
ON A.POSTAL_CODE = LPAD(B.ID,5,'0')
LEFT JOIN 
(SELECT * FROM USA_DEMOGRAPHICS_2017) C
ON A.POSTAL_CODE = LPAD(C.POSTAL_CODE,5,'0')
LEFT JOIN
(SELECT * FROM USA_SPENDING_2017) D
ON A.POSTAL_CODE= LPAD(D.ID,5,'0');

--LEVEL CHECK--
SELECT COUNT(*), COUNT(DISTINCT CITY, POSTAL_CODE, UNIV_CATEGORY, YEAR_SSN, GENDER, DIVISION) FROM NK_DIG_SLS_ZIP_CAT_SSN_DEMO_NA_1010;
-- 2630441, 2630441



--Use IMP table for Store information instead of "STORE_LAT_LONG" table
CREATE OR REPLACE temp TABLE NK_DIG_SLS_ZIP_CAT_SSN_FLAG_DEMO_NA_ADS_1010 AS
SELECT A.CITY ,
       A.POSTAL_CODE,
       A.YEAR_SSN,
       A.UNIV_CATEGORY,
       A.GENDER,
       A.DIVISION
		,COALESCE(A.NET_SALES_UNITS,0) AS NET_SALES_UNITS
		,COALESCE(A.MP_AUR,0) AS MP_AUR
		,COALESCE(A.ORDERS,0) AS ORDERS
		,COALESCE(A.SALES_DOLLARS,0) AS SALES_DOLLARS
		,COALESCE(A.BUYERS_DOL,0) AS BUYERS_DOL
		,COALESCE(A.UNITS_PER_BUYER,0) AS UNITS_PER_BUYER
		,COALESCE(A.AOV,0) AS AOV
		,COALESCE(A.UPT,0) AS UPT
		,COALESCE(A.DEMAND_PER_BUYER,0) AS DEMAND_PER_BUYER
		,COALESCE(A.ORDER_PER_BUYER,0) AS ORDER_PER_BUYER
		,COALESCE(A.DOTCOM_DMND_SALES,0) AS DOTCOM_DMND_SALES
		,COALESCE(A.DOTCOM_DMND_UNITS,0) AS DOTCOM_DMND_UNITS
		,COALESCE(A.DOTCOM_DMND_ORDERS,0) AS DOTCOM_DMND_ORDERS
		,COALESCE(A.SNKRS_DMND_SALES,0) AS SNKRS_DMND_SALES
		,COALESCE(A.SNKRS_DMND_UNITS,0) AS SNKRS_DMND_UNITS
		,COALESCE(A.SNKRS_DMND_ORDERS,0) AS SNKRS_DMND_ORDERS
		,COALESCE(A.NPLUS_DMND_SALES,0) AS NPLUS_DMND_SALES
		,COALESCE(A.NPLUS_DMND_UNITS,0) AS NPLUS_DMND_UNITS
		,COALESCE(A.NPLUS_DMND_ORDERS,0) AS NPLUS_DMND_ORDERS
		,COALESCE(A.DOTCOM_BUYERS,0) AS DOTCOM_BUYERS
		,COALESCE(A.SNKRS_BUYERS,0) AS SNKRS_BUYERS
		,COALESCE(A.NPLUS_BUYERS,0) AS NPLUS_BUYERS
		,COALESCE(A.FULLPRICE_UNITS,0) AS FULLPRICE_UNITS
		,COALESCE(A.MARKDOWN_UNITS,0) AS MARKDOWN_UNITS
		,COALESCE(A.CLEARANCE_UNITS,0) AS CLEARANCE_UNITS
		,COALESCE(A.N_DOTCOM_SALES_IMP,0) AS N_DOTCOM_SALES_IMP
		,COALESCE(A.DEPARTMENT_STORE_SALES,0) AS DEPARTMENT_STORE_SALES
		,COALESCE(A.ATHLETIC_SPECIALTY_SALES,0) AS ATHLETIC_SPECIALTY_SALES
		,COALESCE(A.SPORTING_GOODS_SALES,0) AS SPORTING_GOODS_SALES
		,COALESCE(A.CATEGORY_SPECIALTY_SALES,0) AS CATEGORY_SPECIALTY_SALES
		,COALESCE(A.GENERAL_FOOTWEAR_SALES,0) AS GENERAL_FOOTWEAR_SALES
		,COALESCE(A.NSO_SALES,0) AS NSO_SALES
		,COALESCE(A.N_DOTCOM_UNITS_IMP,0) AS N_DOTCOM_UNITS_IMP
		,COALESCE(A.DEPARTMENT_STORE_UNITS,0) AS DEPARTMENT_STORE_UNITS
		,COALESCE(A.ATHLETIC_SPECIALTY_UNITS,0) AS ATHLETIC_SPECIALTY_UNITS
		,COALESCE(A.SPORTING_GOODS_UNITS,0) AS SPORTING_GOODS_UNITS
		,COALESCE(A.CATEGORY_SPECIALTY_UNITS,0) AS CATEGORY_SPECIALTY_UNITS
		,COALESCE(A.GENERAL_FOOTWEAR_UNITS,0) AS GENERAL_FOOTWEAR_UNITS
		,COALESCE(A.NSO_UNITS,0) AS NSO_UNITS
		,COALESCE(A.N_FS,0) AS 				N_FS
		,COALESCE(A.N_SO,0) AS                 N_SO
		,COALESCE(A.N_PARTNER,0) AS            N_PARTNER
		,COALESCE(A.N_PARTNER_DIG,0) AS        N_PARTNER_DIG
		,COALESCE(A.N_DIG,0) AS                N_DIG
		,COALESCE(A.N_FS_SALES,0) AS           N_FS_SALES
		,COALESCE(A.N_SO_SALES,0) AS           N_SO_SALES
		,COALESCE(A.N_PARTNER_SALES,0) AS      N_PARTNER_SALES
		,COALESCE(A.N_PARTNER_DIG_SALES,0) AS  N_PARTNER_DIG_SALES
		,COALESCE(A.N_DIG_SALES,0) AS          N_DIG_SALES
		,COALESCE(A.N_FS_UNITS,0) AS           N_FS_UNITS
		,COALESCE(A.N_SO_UNITS,0) AS           N_SO_UNITS
		,COALESCE(A.N_PARTNER_UNITS,0) AS      N_PARTNER_UNITS
		,COALESCE(A.N_PARTNER_DIG_UNITS,0) AS  N_PARTNER_DIG_UNITS
		,COALESCE(A.N_DIG_UNITS,0) AS          N_DIG_UNITS
		,COALESCE(A.NFS_COUNT,0) AS               NFS_COUNT
		,COALESCE(A.NSO_COUNT,0) AS               NSO_COUNT
		,COALESCE(A.WOLESALER_COUNT,0) AS         WOLESALER_COUNT
		,COALESCE(A.HEADWEAR,0) AS                HEADWEAR
		,COALESCE(A.EYEWEAR,0) AS                 EYEWEAR
		,COALESCE(A.BOTTOM,0) AS                  BOTTOM
		,COALESCE(A.OTHER_SILHOUETTE,0) AS        OTHER_SILHOUETTE
		,COALESCE(A.TOP,0) AS                     TOP
		,COALESCE(A.SHOE,0) AS                    SHOE
		,COALESCE(A.SOCK,0) AS                    SOCK
		,COALESCE(A.BOYS_PRODUCTS,0) AS           BOYS_PRODUCTS
		,COALESCE(A.GIRLS_PRODUCTS,0) AS          GIRLS_PRODUCTS
		,COALESCE(A.MENS_PRODUCTS,0) AS           MENS_PRODUCTS
		,COALESCE(A.WOMENS_PRODUCTS,0) AS         WOMENS_PRODUCTS
		,COALESCE(A.CONSUMER_COUNT,0) AS CONSUMER_COUNT
		,COALESCE(A.BUYERS_COHORT_0_20,0) AS BUYERS_COHORT_0_20
		,COALESCE(A.BUYERS_COHORT_20_40,0) AS BUYERS_COHORT_20_40
		,COALESCE(A.BUYERS_COHORT_40_60,0) AS BUYERS_COHORT_40_60
		,COALESCE(A.BUYERS_COHORT_60_80,0) AS BUYERS_COHORT_60_80
		,COALESCE(A.BUYERS_COHORT_80_100,0) AS BUYERS_COHORT_80_100
		,COALESCE(A.BUYERS_COHORT_100_150,0) AS BUYERS_COHORT_100_150
		,COALESCE(A.BUYERS_COHORT_150_200,0) AS BUYERS_COHORT_150_200
		,COALESCE(A.BUYERS_COHORT_200_250,0) AS BUYERS_COHORT_200_250
		,COALESCE(A.BUYERS_COHORT_250_300,0) AS BUYERS_COHORT_250_300
		,COALESCE(A.BUYERS_COHORT_300_PLUS,0) AS BUYERS_COHORT_300_PLUS
		,COALESCE(A.CLEARANCE_BUYERS,0) AS CLEARANCE_BUYERS
		,COALESCE(A.MARKDOWN_BUYERS,0) AS MARKDOWN_BUYERS
		,COALESCE(A.FULLPRICE_BUYERS,0) AS FULLPRICE_BUYERS
		,COALESCE(A.PAID_SEARCH_MKT_CHNL_ORDERS, 0) AS PAID_SEARCH_MKT_CHNL_ORDERS
		,COALESCE(A.AFFILIATES_MKT_CHNL_ORDERS, 0) AS AFFILIATES_MKT_CHNL_ORDERS
		,COALESCE(A.EMAIL_MKT_CHNL_ORDERS, 0) AS EMAIL_MKT_CHNL_ORDERS
		,COALESCE(A.SOCIAL_MKT_CHNL_ORDERS, 0) AS SOCIAL_MKT_CHNL_ORDERS
		,COALESCE(A.NATURAL_SEARCH_MKT_CHNL_ORDERS, 0) AS NATURAL_SEARCH_MKT_CHNL_ORDERS
		,COALESCE(A.DIRECT_LOAD_MKT_CHNL_ORDERS, 0) AS DIRECT_LOAD_MKT_CHNL_ORDERS
		,COALESCE(A.BRAND_MKT_CHNL_ORDERS, 0) AS BRAND_MKT_CHNL_ORDERS
		,COALESCE(B.STORE_ID_CNT, 0) AS STORE_ID_CNT
		,COALESCE(A.TOTAL_POP,0) AS TOTAL_POP
		,COALESCE(A.POP_DENSITY,0) AS POP_DENSITY
		,COALESCE(A.TOTAL_HOUSEHOLD,0) AS TOTAL_HOUSEHOLD
		,COALESCE(A.HOUSEHOLD_SIZE,0) AS HOUSEHOLD_SIZE
		,COALESCE(A.MALE_POP,0) AS MALE_POP
		,COALESCE(A.FEMALE_POP,0) AS FEMALE_POP
		,COALESCE(A.TOTAL_POP_AGE0_14,0) AS TOTAL_POP_AGE0_14
		,COALESCE(A.TOTAL_POP_AGE15_29,0) AS TOTAL_POP_AGE15_29
		,COALESCE(A.TOTAL_POP_AGE30_44,0) AS TOTAL_POP_AGE30_44
		,COALESCE(A.TOTAL_POP_AGE45_59,0) AS TOTAL_POP_AGE45_59
		,COALESCE(A.TOTAL_POP_AGE60UP,0) AS TOTAL_POP_AGE60UP
		,COALESCE(A.MALE_POP_AGE0_14,0) AS MALE_POP_AGE0_14
		,COALESCE(A.MALE_POP_AGE15_29,0) AS MALE_POP_AGE15_29
		,COALESCE(A.MALE_POP_AGE30_44,0) AS MALE_POP_AGE30_44
		,COALESCE(A.MALE_POP_AGE45_59,0) AS MALE_POP_AGE45_59
		,COALESCE(A.MALE_POP_AGE60UP,0) AS MALE_POP_AGE60UP
		,COALESCE(A.FEMALE_POP_AGE0_14,0) AS FEMALE_POP_AGE0_14
		,COALESCE(A.FEMALE_POP_AGE15_29,0) AS FEMALE_POP_AGE15_29
		,COALESCE(A.FEMALE_POP_AGE30_44,0) AS FEMALE_POP_AGE30_44
		,COALESCE(A.FEMALE_POP_AGE45_59,0) AS FEMALE_POP_AGE45_59
		,COALESCE(A.FEMALE_POP_AGE60UP,0) AS FEMALE_POP_AGE60UP
		,COALESCE(A.DISPOSABLE_INCOME,0) AS DISPOSABLE_INCOME
		,COALESCE(A.DI_PC,0) AS DI_PC
		,COALESCE(A.DISPOSABLE_INCOME_INDEX,0) AS DISPOSABLE_INCOME_INDEX
		,COALESCE(A.CLOTHING_SPOTZI,0) AS 				CLOTHING_SPOTZI
		,COALESCE(A.CLOTHING_PER_CAPITA,0) AS           CLOTHING_PER_CAPITA
		,COALESCE(A.CLOTHING_INDEX,0) AS                CLOTHING_INDEX
		,COALESCE(A.FOOTWEAR_SPOTZI,0) AS               FOOTWEAR_SPOTZI
		,COALESCE(A.FOOTWEAR_PER_CAPITA,0) AS           FOOTWEAR_PER_CAPITA
		,COALESCE(A.FOOTWEAR_INDEX,0) AS                FOOTWEAR_INDEX
		,COALESCE(A.REC_HOBBIES_SPOTZI,0) AS            REC_HOBBIES_SPOTZI
		,COALESCE(A.RECREATION_HOBBIES_PER_CAPITA,0) AS RECREATION_HOBBIES_PER_CAPITA
		,COALESCE(A.RECREATION_HOBBIES_INDEX,0) AS      RECREATION_HOBBIES_INDEX
       ,CASE
           WHEN RIGHT(A.YEAR_SSN, 2) = 'SP' THEN 1
           ELSE 0
       END AS SP_SSN,
       CASE
           WHEN RIGHT(A.YEAR_SSN, 2) = 'SU' THEN 1
           ELSE 0
       END AS SU_SSN,
       CASE
           WHEN RIGHT(A.YEAR_SSN, 2) = 'FA' THEN 1
           ELSE 0
       END AS FA_SSN,
       CASE
           WHEN RIGHT(A.YEAR_SSN, 2) = 'HO' THEN 1
           ELSE 0
       END AS HO_SSN
       
	   
FROM NK_DIG_SLS_ZIP_CAT_SSN_DEMO_NA_1010 A

LEFT JOIN
  (SELECT ZIP_CODE ,
          COUNT(DISTINCT STORE_ID) AS STORE_ID_CNT
   FROM
     (SELECT STORE_ID ,
             MIN(ZIP_CODE) AS ZIP_CODE
      FROM
        (SELECT DISTINCT TRIM(STORE_ID) AS STORE_ID ,
                         TRIM(LATITUDE) AS LATITUDE ,
                         TRIM(LONGITUDE) AS LONGITUDE ,
                         TRIM(ZIP_CODE) AS ZIP_CODE
         FROM STORE_LAT_LONG
         WHERE LATITUDE IS NOT NULL
           AND LONGITUDE IS NOT NULL
           AND ZIP_CODE IS NOT NULL
           AND ZIP_CODE NOT LIKE '%*UNK*%'
           AND ZIP_CODE NOT LIKE '%#N/A%')
      GROUP BY STORE_ID)
   GROUP BY ZIP_CODE) B ON A.POSTAL_CODE = B.ZIP_CODE;


--LEVEL CHECK--
SELECT COUNT(*) , COUNT(DISTINCT CITY, POSTAL_CODE, YEAR_SSN, UNIV_CATEGORY, GENDER, DIVISION) FROM NK_DIG_SLS_ZIP_CAT_SSN_FLAG_DEMO_NA_ADS_1010;
-- 2630441, 2630441




create or replace table NK_DIG_SLS_ZIP_CAT_SSN_FLAG_DEMO_AGG_NA_ADS_1010 AS
select
a.*,
COALESCE (b.competitors_nbr,0) AS competitors_nbr,
COALESCE(b.VF_OUTLET_FLG,0) AS VF_OUTLET_FLG,
COALESCE(b.UNDER_ARMOUR_FLG,0) AS UNDER_ARMOUR_FLG,
COALESCE(b.ADIDAS_FLG,0) AS ADIDAS_FLG,
COALESCE(b.PUMA_FLG,0) AS PUMA_FLG,
COALESCE(b.ASICS_FLG,0) AS ASICS_FLG,
COALESCE (b.LULULEMON_FLG,0) AS LULULEMON_FLG

from
NK_DIG_SLS_ZIP_CAT_SSN_FLAG_DEMO_NA_ADS_1010 a
left join
(select
LPAD (ZIP_CODE, 5, '0') as zip_code,
count(COMPETITOR_FLG) as competitors_nbr,
max(case
when UPPER(TRIM(list_name)) = 'VF OUTLET' 			then 1 else 0 end) as VF_OUTLET_FLG ,
max(CASE
when UPPER(TRIM(list_name)) = 'UNDER ARMOUR'         then 1 else 0 end) as UNDER_ARMOUR_FLG,
max(CASE
when UPPER(TRIM(list_name)) = 'ADIDAS US'            then 1 else 0 end) as ADIDAS_FLG,
max(CASE
when UPPER(TRIM(list_name)) LIKE '%PUMA%'          then 1 else 0 end) as PUMA_FLG,
max(CASE
when UPPER(TRIM(list_name)) = 'ASICS'                then 1 else 0 end) as ASICS_FLG,
max(CASE
when UPPER(TRIM(list_name)) = 'LULULEMON ATHLETICA'  then 1 else 0 end) as LULULEMON_FLG
FROM 
AGGDATA_USA
 WHERE COMPETITOR_FLG =1 
GROUP BY LPAD (ZIP_CODE, 5, '0')) b
on a.POSTAL_CODE=b.zip_code;

--LEVEL CHECK--
SELECT COUNT(*) , COUNT(DISTINCT CITY, POSTAL_CODE, YEAR_SSN, UNIV_CATEGORY, GENDER, DIVISION) FROM NK_DIG_SLS_ZIP_CAT_SSN_FLAG_DEMO_AGG_NA_ADS_1010;
-- 2630441, 2630441

CREATE OR REPLACE TABLE NK_DIG_SLS_ZIP_CAT_SSN_FLAG_DEMO_AGG_NA_ADS_1010 AS
SELECT * FROM NK_DIG_SLS_ZIP_CAT_SSN_FLAG_DEMO_AGG_NA_ADS_1010
WHERE CITY NOT IN ('TORONTO');

--LEVEL CHECK--
SELECT COUNT(*) , COUNT(DISTINCT CITY, POSTAL_CODE, YEAR_SSN, UNIV_CATEGORY, GENDER, DIVISION) FROM NK_DIG_SLS_ZIP_CAT_SSN_FLAG_DEMO_AGG_NA_ADS_1010;
-- 2630441, 2630441

CREATE OR REPLACE TABLE AGG_ADS AS
SELECT 
LPAD (ZIP_CODE, 5, '0') as POSTAL_CODE
,LIST_NAME
,CATEGORY
,LATITUDE
,LONGITUDE
FROM AGGDATA_USA 
WHERE POSTAL_CODE IN (SELECT DISTINCT POSTAL_CODE FROM NK_DIG_SLS_ZIP_CAT_SSN_FLAG_DEMO_AGG_NA_ADS_1010);


SELECT * FROM AGG_ADS;


SELECT * FROM NK_DIG_SLS_ZIP_CAT_SSN_FLAG_DEMO_AGG_NA_ADS_1010
WHERE CITY = 'NEW YORK';

SELECT SUM(SALES_DOLLARS) FROM  NK_DIG_SLS_ZIP_CAT_SSN_FLAG_DEMO_AGG_NA_ADS_1010
WHERE POSTAL_CODE = '10461'
AND YEAR_SSN LIKE '%18%';


select distinct univ_category from NK_DIG_SLS_ZIP_CAT_SSN_FLAG_DEMO_AGG_NA_ADS_1010;

select * from IMP_DIG_FCST_10_10_without_partner;
drop table IMP_DIG_FCST_10_10_without_partner;

SELECT * FROM zip_code_100;

SELECT * FROM IMP_DIG_FCST_10_08;

select MODEL_GRAIN, ROUND(sum(opportunity),0), SUM(SALES_DOLLARS), SUM(PRED) from IMP_DIG_FCST_10_08
where city = 'NEW YORK'
AND YEAR_SSN LIKE '%18%'
group by MODEL_GRAIN;




create or replace table NA_DIG_OPP_PRED_WO_PARTNER_1010 as 
select * from IMP_DIG_FCST_10_10_wo_partner;

drop table IMP_DIG_FCST_10_10_wo_partner;

select * from NA_DIG_OPP_PRED_WO_PARTNER_1010;

CREATE OR REPLACE TABLE NA_DIG_OPP_PRED_WO_PARTNER_1010 AS
select CITY,
POSTAL_CODE,
YEAR_SSN AS SEASON,
MODEL_GRAIN AS CATEGORY,
GENDER,
DIVISION,
SALES_DOLLARS AS ACTUALS,
PRED AS PREDICTED,
DELTA,
OPPORTUNITY,
OVER_PERFORMING
FROM NA_DIG_OPP_PRED_WO_PARTNER_1010;

